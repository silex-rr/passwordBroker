openapi: 3.0.0
info:
  title: 'PasswordBroker API'
  description: ''
  version: v1
paths:
  '/identity/api/userApplications/{userApplication:user_application_id}':
    get:
      tags:
        - Identity_UserApplicationController
      summary: 'Detail info fro User Application'
      operationId: f08f9b65756e857f18b3bcb7e4991205
      parameters:
        -
          name: 'userApplication:user_application_id'
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identity_UserApplicationId'
      responses:
        '200':
          description: 'User Application Data'
          content:
            application/json:
              schema:
                properties:
                  userApplication: { $ref: '#/components/schemas/Identity_UserApplication' }
                type: object
  /identity/api/userApplications:
    post:
      tags:
        - Identity_UserApplicationController
      summary: 'Create new instance of User Application'
      operationId: e9bdc472172fb41698c7566c34c07033
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Identity_CreateUserApplicationRequest'
      responses:
        '200':
          description: 'User Application was successfully created'
          content:
            application/json:
              schema:
                properties:
                  userApplication: { $ref: '#/components/schemas/Identity_UserApplication' }
                type: object
  '/identity/api/userApplication/{userApplication:user_application_id}/offlineDatabaseMode':
    get:
      tags:
        - Identity_UserApplicationController
      summary: 'Check if the UserApplication is in Offline Database mode'
      operationId: 01335891dd2fbc924c7c7ad735e28acf
      parameters:
        -
          name: 'userApplication:user_application_id'
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identity_UserApplicationId'
      responses:
        '200':
          description: 'User Application offline database mode status is delivered'
          content:
            application/json:
              schema:
                properties:
                  status: { $ref: '#/components/schemas/Identity_IsOfflineDatabaseMode' }
                type: object
    put:
      tags:
        - Identity_UserApplicationController
      summary: 'Switch UserApplication offlineDatabase mode'
      operationId: c7d26b092f1616a506bf864d92e8967e
      parameters:
        -
          name: 'userApplication:user_application_id'
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identity_UserApplicationId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Identity_UpdateOfflineDatabaseModeRequest'
      responses:
        '200':
          description: 'UserApplication OfflineDatabaseMode switched'
  '/identity/api/userApplication/{userApplication:user_application_id}/isOfflineDatabaseRequiredUpdate':
    get:
      tags:
        - Identity_UserApplicationController
      summary: 'Check if the UserApplication OfflineDatabase needs to be updated'
      operationId: 2fc1dcd944de462d149d4fbbfdcdfe06
      parameters:
        -
          name: 'userApplication:user_application_id'
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identity_UserApplicationId'
      responses:
        '200':
          description: 'User Application OfflineDatabase sync status is delivered'
          content:
            application/json:
              schema:
                properties:
                  status: { $ref: '#/components/schemas/Identity_IsOfflineDatabaseRequiredUpdate' }
                type: object
  '/identity/api/userApplication/{userApplication:user_application_id}/isRsaPrivateRequiredUpdate':
    get:
      tags:
        - Identity_UserApplicationController
      summary: 'Check if the UserApplication RSA keys needs to be updated'
      operationId: 987bd9aad89e25a28a77d20d0f59a669
      parameters:
        -
          name: 'userApplication:user_application_id'
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Identity_UserApplicationId'
      responses:
        '200':
          description: 'User Application RSA keys sync status is delivered'
          content:
            application/json:
              schema:
                properties:
                  status: { $ref: '#/components/schemas/Identity_IsRsaPrivateRequiredUpdate' }
                type: object
  /identity/api/users/search:
    get:
      tags:
        - Identity_UserController
      summary: 'Users list'
      operationId: ff3c8c656d0fbe284e83596b112d4361
      parameters:
        -
          name: q
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Identity_UsersSearchRequest_q'
        -
          name: perPage
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Identity_UsersSearchRequest_perPage'
        -
          name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Identity_UsersSearchRequest_page'
        -
          name: entryGroupInclude
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Identity_UsersSearchRequest_entryGroupInclude'
        -
          name: entryGroupExclude
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Identity_UsersSearchRequest_entryGroupExclude'
      responses:
        '200':
          description: 'List of user with pagination'
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/Common_Paginator' }
                  - { description: 'User set as data type', properties: { data: { type: array, items: { $ref: '#/components/schemas/Identity_User' } } }, type: object }
  /system/api/backups:
    get:
      tags:
        - System_BackupController
      summary: 'Backup entities list'
      operationId: 1cdd20acd2c39eb2bbc267e626cf450e
      parameters:
        -
          name: q
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/System_BackupSearchRequest_q'
        -
          name: perPage
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/System_BackupSearchRequest_perPage'
        -
          name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/System_BackupSearchRequest_page'
      responses:
        '200':
          description: 'List of backups with pagination'
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/Common_Paginator' }
                  - { description: 'Backup set as data type', properties: { data: { type: array, items: { $ref: '#/components/schemas/System_Backup' } } }, type: object }
    post:
      tags:
        - System_BackupController
      summary: 'Create new Backup'
      operationId: f6d7c03a1667c4ae9470922fdf58e1c0
      responses:
        '200':
          description: 'Backup entity was successfully created and put in the queue for executing'
  '/backups/{backup:backup_id}':
    get:
      tags:
        - System_BackupController
      summary: 'Show a Backup entity'
      operationId: 9e51625c7d80eac2fad5593b565bdfc9
      parameters:
        -
          name: 'backup:backup_id'
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/System_BackupId'
      responses:
        '200':
          $ref: '#/components/schemas/System_Backup'
components:
  schemas:
    Identity_CreateUserApplicationRequest:
      properties:
        clientId:
          type: string
          format: uuid
          nullable: true
      type: object
    Identity_UpdateOfflineDatabaseModeRequest:
      properties:
        status:
          type: boolean
      type: object
    Identity_UsersSearchRequest_q:
      type: string
      nullable: true
    Identity_UsersSearchRequest_entryGroupInclude:
      type: string
      format: uuid
      nullable: true
    Identity_UsersSearchRequest_entryGroupExclude:
      type: string
      format: uuid
      nullable: true
    Identity_UsersSearchRequest_perPage:
      type: integer
      minimum: 1
      example: 15
      nullable: true
    Identity_UsersSearchRequest_page:
      type: integer
      maximum: 100
      minimum: 1
      example: 1
      nullable: true
    Identity_ClientId:
      type: string
      format: uuid
    Identity_IsOfflineDatabaseMode:
      type: boolean
    Identity_IsOfflineDatabaseRequiredUpdate:
      type: boolean
    Identity_IsRsaPrivateRequiredUpdate:
      type: boolean
    Identity_UserApplicationId:
      type: string
      format: uuid
    Identity_UserApplication:
      properties:
        userApplicationId:
          $ref: '#/components/schemas/Identity_UserApplicationId'
        clientId:
          $ref: '#/components/schemas/Identity_ClientId'
        isOfflineDatabaseRequiredUpdate:
          $ref: '#/components/schemas/Identity_IsOfflineDatabaseRequiredUpdate'
        isRsaPrivateRequiredUpdate:
          $ref: '#/components/schemas/Identity_IsRsaPrivateRequiredUpdate'
        isOfflineDatabaseMode:
          $ref: '#/components/schemas/Identity_IsOfflineDatabaseMode'
        offlineDatabaseFetchedAt:
          type: string
          format: date-time
        rsaPrivateFetchedAt:
          type: string
          format: date-time
      type: object
    Identity_Email:
      type: string
      format: email
    Identity_IsAdmin:
      type: boolean
    Identity_PublicKey:
      type: string
      format: binary
    Identity_UserId:
      type: string
      format: uuid
    Identity_UserName:
      type: string
    Identity_User:
      properties:
        user_id:
          $ref: '#/components/schemas/Identity_UserId'
        public_key:
          $ref: '#/components/schemas/Identity_PublicKey'
        is_admin:
          $ref: '#/components/schemas/Identity_IsAdmin'
        name:
          $ref: '#/components/schemas/Identity_UserName'
        email:
          $ref: '#/components/schemas/Identity_Email'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
      type: object
    PasswordBroker_EntryGroupId:
      type: string
      format: uuid
    PasswordBroker_GroupName:
      type: string
    PasswordBroker_MaterializedPath:
      type: string
    PasswordBroker_EntryGroup:
      properties:
        entry_group_id:
          $ref: '#/components/schemas/PasswordBroker_EntryGroupId'
        name:
          $ref: '#/components/schemas/PasswordBroker_GroupName'
        materialized_path:
          $ref: '#/components/schemas/PasswordBroker_MaterializedPath'
        created_at:
          type: date-time
        updated_at:
          type: date-time
          nullable: true
        deleted_at:
          type: date-time
          nullable: true
      type: object
    System_BackupSearchRequest:
      properties:
        q:
          description: 'query search by backup name'
          type: string
          example: part_of_backup_name
          nullable: true
        perPage:
          type: integer
          example: 15
          nullable: true
        page:
          type: integer
          example: 1
          nullable: true
      type: object
    System_BackupSearchRequest_q:
      type: string
      nullable: true
    System_BackupSearchRequest_perPage:
      type: integer
      minimum: 1
      example: 15
      nullable: true
    System_BackupSearchRequest_page:
      type: integer
      maximum: 100
      minimum: 1
      example: 1
      nullable: true
    System_BackupCreated:
      type: string
      format: date-time
    System_BackupDeleted:
      type: string
      format: date-time
      nullable: true
    System_BackupId:
      type: string
      format: uuid
    System_BackupPassword:
      type: string
      nullable: true
    System_BackupState:
      type: string
      enum:
        - await
        - creating
        - created
        - error
        - deleted
    System_ErrorMessage:
      type: string
      nullable: true
    System_FileName:
      type: string
    System_Size:
      type: integer
    System_Backup:
      properties:
        backup_id:
          $ref: '#/components/schemas/System_BackupId'
        file_name:
          $ref: '#/components/schemas/System_FileName'
        state:
          $ref: '#/components/schemas/System_BackupState'
        size:
          $ref: '#/components/schemas/System_Size'
        backup_created:
          $ref: '#/components/schemas/System_BackupCreated'
        backup_deleted:
          $ref: '#/components/schemas/System_BackupDeleted'
        error_message:
          $ref: '#/components/schemas/System_ErrorMessage'
        password:
          $ref: '#/components/schemas/System_BackupPassword'
      type: object
    Common_Paginator:
      properties:
        data: {  }
        current_page:
          type: integer
          minimum: 1
        last_page:
          type: integer
          minimum: 1
        per_page:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
      type: object
